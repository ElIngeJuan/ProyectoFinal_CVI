#include "Structures.fxh"
#include "Utils.fxh"

ConstantBuffer<GlobalConstants> g_Constants;

Texture2D g_GBuffer_Color;
Texture2D g_GBuffer_Normal;
Texture2D g_GBuffer_Depth;
Texture2D g_RayTracedTex;

struct PSInput { 
    float4 Pos : SV_POSITION; 
    float2 UV  : TEX_COORD; 
};

float4 main(in PSInput PSIn) : SV_Target {
    float2 Dim;
    g_GBuffer_Color.GetDimensions(Dim.x, Dim.y);
    float2 ScreenUV = float2(PSIn.UV.x, 1.0 - PSIn.UV.y);
    int3 TexelPos = int3(ScreenUV * Dim, 0);
    
    // Leer G-Buffer
    float4 Color = g_GBuffer_Color.Load(TexelPos);
    float4 NormalData = g_GBuffer_Normal.Load(TexelPos);
    float Depth = g_GBuffer_Depth.Load(TexelPos).r;
    
    // Decodificar datos
    float3 Normal = normalize(NormalData.xyz * 2.0 - 1.0);
    float Reflectivity = NormalData.w;
    float3 WPos = ScreenPosToWorldPos(ScreenUV, Depth, g_Constants.ViewProjInv);
    
    // Cálculo de Fresnel
    float R = 0.0;
    if (Depth < 1.0) {
        float3 ViewDir = normalize(g_Constants.CameraPos - WPos);
        float NdotV = saturate(dot(Normal, ViewDir));
        float R0 = lerp(0.04, Reflectivity, Reflectivity);
        R = lerp(R0, 1.0, pow(1.0 - NdotV, 5.0));
    } else {
        Color.rgb = GetSkyColor(normalize(WPos - g_Constants.CameraPos), g_Constants.LightDir.xyz);
    }

    // Aplicar reflejos ray tracing solo en materiales no acuáticos
    float4 RTColor = g_RayTracedTex.Load(TexelPos);
    float blendFactor = Reflectivity > 0.5 ? 0.0 : R * Reflectivity;
    Color.rgb = lerp(Color.rgb, RTColor.rgb, blendFactor);

    return Color;
}